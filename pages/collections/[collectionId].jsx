/* eslint-disable @next/next/no-img-element */
import React, { useState, useEffect } from 'react'
import { ThirdwebSDK } from '@thirdweb-dev/sdk'
import { useAddress } from '@thirdweb-dev/react'
import { client } from '../../lib/sanityClient'
import { useRouter } from 'next/router'
import Head from 'next/head'

import ReactLoading from 'react-loading'
import Header from '../../components/Header'
import NFTCard from '../../components/NFTCard'

import { CgWebsite } from 'react-icons/cg'
import { AiOutlineInstagram, AiOutlineTwitter } from 'react-icons/ai'
import { HiDotsVertical } from 'react-icons/hi'

const style = {
  bannerImageContainer: `h-[20vh] w-screen overflow-hidden flex justify-center items-center`,
  bannerImage: `object-cover w-full pt-24`,
  infoContainer: `w-screen px-4`,
  midRow: `w-full flex justify-center text-white`,
  endRow: `w-full flex justify-end text-white`,
  profileImg: `w-40 h-40 object-cover rounded-full border border-gray-700 mt-[-4rem]`,
  socialIconsContainer: `flex text-3xl mb-[-2rem]`,
  socialIconsWrapper: `w-44`,
  socialIconsContent: `flex container cursor-pointer justify-between text-[1.4rem] border-2 rounded-lg px-2`,
  socialIcon: `my-2`,
  divider: `border-r-2`,
  title: `text-5xl font-bold mb-4`,
  createdBy: `text-lg mb-4`,
  statsContainer: `w-[44vw] flex justify-between py-4 border border-gray-700 rounded-xl mb-4`,
  collectionStat: `w-1/4`,
  statValue: `text-3xl font-bold w-full flex items-center justify-center`,
  ethLogo: `h-6 mr-2`,
  statName: `text-lg w-full text-center mt-1`,
  description: `text-[#8a939b] text-xl w-max-1/4 flex-wrap mt-4`,
}

const Collection = () => {
  const address = useAddress()
  const router = useRouter()
  const { collectionId } = router.query
  const [collection, setCollection] = useState({})
  const [nfts, setNfts] = useState([])
  const [listings, setListings] = useState([])
  const [calledPush, setCalledPush] = useState(false)
  const [loading, setLoading] = useState(true)

  /** If the user is connected to the application with their wallet, but accesses an application page
   * coming from an external link, its address is initially `undefined`, and the redirect to
   * index should not be done. For this we must wait to receive the response from the useAddress hook, where
   * if the hook cannot get the address within 6 sec useRouter can be called by setting calledPush
   * to true, so if the user is logged in it will display a loading screen and load the application
   * within 8 sec, otherwise after 8 sec you will be redirected to the index where it should be done
   * the connection to Metamask. This wait will only be done for external links, in the normal navigation of
   * the page will not be done, and the maximum timeout will be 8 sec. This was the solution I found so that
   * the logged in user does not have to be redirected to homepage even logged in, and at the same time
   * we avoid rendering the front of the application if the user is not actually connected.
   */
  //console.log('address', Boolean(address))
  setInterval(
    () => (Boolean(address) ? setCalledPush(false) : setCalledPush(true)),
    6000
  )

  useEffect(() => {
    // console.log('calledPush in useEffect', calledPush)
    if (Boolean(address)) return
    setTimeout(() => {
      calledPush && router.push('/')
    }, 8000)
  }, [address, calledPush, router])

  useEffect(() => {
    setLoading(true)
    ;(async () => {
      const sdk = new ThirdwebSDK('rinkeby')
      const collection = sdk.getNFTCollection(
        '0xa08b847d5dC8833700C28200475Ac3c64cb0DFaE'
      )
      const marketplace = sdk.getMarketplace(
        '0x7600aB00c4524E11da066650Dd053040D0880EB0'
      )

      // listing -> be available for purchase
      const listings = await marketplace.getActiveListings()
      const nfts = await collection.getAll()
      setListings(listings)
      setNfts(nfts)
      setLoading(false)
    })()
  }, [])

  // console.log('listings', listings)
  // console.log('nfts', nfts)

  useEffect(() => {
    const fetchCollectionData = async (sanityClient = client) => {
      const query = `*[_type == "marketItems" && contractAddress == "${collectionId}" ] {
        "imageUrl": profileImage.asset->url,
        "bannerImageUrl": bannerImage.asset->url,
        volumeTraded,
        createdBy,
        contractAddress,
        "creator": createdBy->userName,
        title, 
        floorPrice,
        "allOwners": owners[]->, description
      }`

      const collectionData = await sanityClient.fetch(query)
      setCollection(collectionData[0])
    }
    fetchCollectionData()
  }, [collectionId])

  return (
    <>
      <Head>
        <title>Collections / {collection?.title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      {!address ? (
        <div className="h-[100vh] flex flex-col items-center justify-center scroll-smooth">
          <ReactLoading
            type={'spinningBubbles'}
            color={'#2081e2'}
            width={65}
            height={65}
          />
          <span className="text-base z-50 text-center text-[#cccccc] font-semibold mt-8">
            Checking connectivity with Metamask...
          </span>
        </div>
      ) : (
        <div className="overflow-hidden">
          <Header />
          <div className={style.bannerImageContainer}>
            <img
              className={style.bannerImage}
              alt="banner/cover"
              src={
                collection?.bannerImageUrl
                  ? collection.bannerImageUrl
                  : 'https://via.placeholder.com/1000x500'
              }
            />
          </div>
          <div className={style.infoContainer}>
            <div className={style.midRow}>
              <img
                className={style.profileImg}
                alt="profile/img"
                src={
                  collection?.imageUrl
                    ? collection.imageUrl
                    : 'https://via.placeholder.com/150x150'
                }
              />
            </div>
            <div className={style.endRow}>
              <div className={style.socialIconsContainer}>
                <div className={style.socialIconsWrapper}>
                  <div className={style.socialIconsContent}>
                    <div className={style.socialIcon}>
                      <CgWebsite />
                    </div>
                    <div className={style.divider} />
                    <div className={style.socialIcon}>
                      <AiOutlineInstagram />
                    </div>
                    <div className={style.divider} />
                    <div className={style.socialIcon}>
                      <AiOutlineTwitter />
                    </div>
                    <div className={style.divider} />
                    <div className={style.socialIcon}>
                      <HiDotsVertical />
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className={style.midRow}>
              <div className={style.title}>{collection?.title}</div>
            </div>
            <div className={style.midRow}>
              <div className={style.createdBy}>
                Created by{' '}
                <span className="text-[#2081e2]">{collection?.creator}</span>
              </div>
            </div>
          </div>

          {loading ? (
            <div className="h-[30vh] flex items-center justify-center scroll-smooth">
              <ReactLoading
                type={'spinningBubbles'}
                color={'#2081e2'}
                width={65}
                height={65}
                className="flex items-center"
              />
            </div>
          ) : (
            <>
              <div className={style.midRow}>
                <div className={style.statsContainer}>
                  <div className={style.collectionStat}>
                    <div className={style.statValue}>{nfts.length}</div>
                    <div className={style.statName}>items</div>
                  </div>
                  <div className={style.collectionStat}>
                    <div className={style.statValue}>
                      {collection?.allOwners ? collection.allOwners.length : ''}
                    </div>
                    <div className={style.statName}>owners</div>
                  </div>
                  <div className={style.collectionStat}>
                    <div className={style.statValue}>
                      <img
                        src="/eth.png"
                        alt="eth/symbol"
                        className={style.ethLogo}
                      />
                      {collection?.floorPrice}
                    </div>
                    <div className={style.statName}>floor price</div>
                  </div>
                  <div className={style.collectionStat}>
                    <div className={style.statValue}>
                      <img
                        src="/eth.png"
                        alt="eth/symbol"
                        className={style.ethLogo}
                      />
                      {collection?.volumeTraded}.5k
                    </div>
                    <div className={style.statName}>volume traded</div>
                  </div>
                </div>
              </div>
              <div className={style.midRow}>
                <div className={style.description}>
                  {collection?.description}
                </div>
              </div>
            </>
          )}

          <div className="flex flex-wrap">
            {nfts.map((nftItem, index) => (
              <NFTCard
                key={index}
                nftItem={nftItem.metadata}
                title={collection?.title}
                listings={listings}
              />
            ))}
          </div>
        </div>
      )}
    </>
  )
}

export default Collection
